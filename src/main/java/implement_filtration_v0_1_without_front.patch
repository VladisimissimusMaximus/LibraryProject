Index: src/main/java/com/company/dao/BookDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/dao/BookDAO.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/dao/BookDAO.java	(date 1675108672211)
@@ -13,6 +13,7 @@
 import java.time.LocalDateTime;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 public class BookDAO {
     public static final String NAME_COL = "name";
@@ -25,8 +26,7 @@
     private static final Logger LOGGER = LoggerFactory.getLogger(UserDAO.class);
 
     public List<Book> findAll(SelectionOptions options) {
-
-        LOGGER.info("getting all books");
+        LOGGER.info("getting all books with options {}", options);
 
         String query = "SELECT * FROM books WHERE books.count > 0";
         query = options.applyToQuery(query);
@@ -34,6 +34,14 @@
 
         try (Connection conn = ConnectionManager.getConnection();
              PreparedStatement stmt = conn.prepareStatement(query)) {
+
+            Map<Filter.FilterColumn, String> filterColumnValues = options.getFilterColumnValues();
+            int index = 1;
+            for (Map.Entry<Filter.FilterColumn, String> entry : filterColumnValues.entrySet()) {
+                LOGGER.info("found a value! " + entry.getValue());
+                stmt.setString(index++, entry.getValue());
+            }
+
             ResultSet rs = stmt.executeQuery();
 
             while (rs.next()) {
@@ -61,6 +69,78 @@
         return books;
     }
 
+    public List<Book> findAllByName(String name, SelectionOptions options) {
+        LOGGER.info("getting all books by name {}", name);
+
+        String query = "SELECT * FROM books WHERE books.count > 0 AND books.name = ?";
+        query = options.applyToQuery(query);
+        List<Book> books = new ArrayList<>();
+
+        try (Connection conn = ConnectionManager.getConnection();
+             PreparedStatement stmt = conn.prepareStatement(query)) {
+            stmt.setString(1, name);
+            ResultSet rs = stmt.executeQuery();
+
+            while (rs.next()) {
+                Book book = new Book();
+                int id = rs.getInt(ID_COL);
+                String author = rs.getString(AUTHOR_COL);
+                String publisher = rs.getString(PUBLISHER_COL);
+                int count = rs.getInt(COUNT_COL);
+                LocalDateTime publicationDateTime = rs.getTimestamp(PUBLICATION_DATE_COL).toLocalDateTime();
+                book.setId(id);
+                book.setName(name);
+                book.setAuthor(author);
+                book.setPublisher(publisher);
+                book.setCount(count);
+                book.setPublicationDate(publicationDateTime.toLocalDate());
+                books.add(book);
+            }
+
+        } catch (SQLException e) {
+            LOGGER.warn("Failed to find all books, cause: {}", e.getMessage());
+            throw new DAOException("Failed to find all books " , e);
+        }
+
+        return books;
+    }
+
+    public List<Book> findAllByAuthor(String author, SelectionOptions options) {
+        LOGGER.info("getting all books by author {}", author);
+
+        String query = "SELECT * FROM books WHERE books.count > 0 AND books.author = ?";
+        query = options.applyToQuery(query);
+        List<Book> books = new ArrayList<>();
+
+        try (Connection conn = ConnectionManager.getConnection();
+             PreparedStatement stmt = conn.prepareStatement(query)) {
+            stmt.setString(1, author);
+            ResultSet rs = stmt.executeQuery();
+
+            while (rs.next()) {
+                Book book = new Book();
+                int id = rs.getInt(ID_COL);
+                String name = rs.getString(NAME_COL);
+                String publisher = rs.getString(PUBLISHER_COL);
+                int count = rs.getInt(COUNT_COL);
+                LocalDateTime publicationDateTime = rs.getTimestamp(PUBLICATION_DATE_COL).toLocalDateTime();
+                book.setId(id);
+                book.setName(name);
+                book.setAuthor(author);
+                book.setPublisher(publisher);
+                book.setCount(count);
+                book.setPublicationDate(publicationDateTime.toLocalDate());
+                books.add(book);
+            }
+
+        } catch (SQLException e) {
+            LOGGER.warn("Failed to find all books, cause: {}", e.getMessage());
+            throw new DAOException("Failed to find all books " , e);
+        }
+
+        return books;
+    }
+
     public Book findById(int id) {
 
         LOGGER.info("finding book with id {}", id);
@@ -220,8 +300,17 @@
         query = filter.applyToQuery(query);
         int result = 0;
         try (Connection connection = ConnectionManager.getConnection();
-             PreparedStatement preparedStatement = connection.prepareStatement(query);
-             ResultSet resultSet = preparedStatement.executeQuery()) {
+             PreparedStatement stmt = connection.prepareStatement(query);
+             ) {
+
+            Map<Filter.FilterColumn, String> filterColumnValues = filter.getColumnValueMap();
+            int index = 1;
+            for (Map.Entry<Filter.FilterColumn, String> entry : filterColumnValues.entrySet()) {
+                LOGGER.info("found a value! " + entry.getValue());
+                stmt.setString(index++, entry.getValue());
+            }
+
+            ResultSet resultSet = stmt.executeQuery();
             if (resultSet.next()) {
                 result = resultSet.getInt(1);
             }
Index: src/main/java/com/company/web/Uri.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/web/Uri.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/web/Uri.java	(date 1675098514460)
@@ -16,10 +16,14 @@
     PROFILE("profile"),
     CATALOGUE("catalogue"),
     DELETE_BOOK("catalogue/delete/%d"),
-    OPERATION("catalogue/operation"),
+    OPERATIONS("catalogue/operation"),
     READ("catalogue/operation/read/%d"),
     SUBSCRIBE("catalogue/operation/subscribe/%d"),
-    APPROVE("catalogue/operation/approve");
+    APPROVE("catalogue/operation/approve"),
+    MY_OPERATIONS("profile/operation"),
+    RETURN_BOOK("profile/operation/return/%d"),
+    CANCEL_ORDER("profile/operation/cancel/%d"),
+    UNSUBSCRIBE("profile/operation/unsub/%d");
 
     private final String path;
 
Index: src/main/java/com/company/dao/OperationDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/dao/OperationDAO.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/dao/OperationDAO.java	(date 1675101640067)
@@ -72,12 +72,13 @@
     }
 
 
-    public List<Operation> findUserId(int userId) {
+    public List<Operation> findByUserId(int userId) {
         LOGGER.info("finding operations with userId {}", userId);
 
         List<Operation> result = new ArrayList<>();
-        String query = "SELECT * FROM book_operations " +
-                "WHERE user_id = ?";
+        String query = "SELECT user_id, book_id, books.name, books.author, start_date, duration_days, status FROM book_operations " +
+                "INNER JOIN books ON book_operations.book_id = books.id " +
+                "WHERE user_id = ? ";
         User user = new User();
         user.setId(userId);
 
@@ -88,6 +89,8 @@
 
             while (rs.next()) {
                 int bookId = rs.getInt(BOOK_ID_COL);
+                String bookName = rs.getString(BookDAO.NAME_COL);
+                String bookAuthor = rs.getString(BookDAO.AUTHOR_COL);
                 LocalDateTime startDate = rs.getTimestamp(START_DATE_COL).toLocalDateTime();
                 OperationStatus status = OperationStatus.valueOf(rs.getString(STATUS_COL));
                 int duration = rs.getInt(DURATION_COL);
@@ -97,12 +100,13 @@
 
                 Book book = new Book();
                 book.setId(bookId);
+                book.setName(bookName);
+                book.setAuthor(bookAuthor);
                 operation.setBook(book);
 
                 operation.setStartDate(startDate);
                 operation.setStatus(status);
                 operation.setDuration(duration);
-
                 result.add(operation);
             }
 
Index: src/main/java/com/company/web/command/operation/ReturnBookCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/web/command/operation/ReturnBookCommand.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/web/command/operation/ReturnBookCommand.java	(date 1675096266962)
@@ -1,14 +1,49 @@
 package com.company.web.command.operation;
 
+import com.company.model.Book;
+import com.company.model.User;
+import com.company.service.OperationService;
+import com.company.util.WebUtil;
+import com.company.web.Uri;
 import com.company.web.command.AbstractCommand;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
 public class ReturnBookCommand extends AbstractCommand {
+    public static final Logger logger = LoggerFactory.getLogger(ReturnBookCommand.class);
+    private static final OperationService service = new OperationService();
+    private Integer bookId;
+    private Integer userId;
+
+    @Override
+    public void init(HttpServletRequest req, HttpServletResponse res) {
+        super.init(req, res);
+        bookId = WebUtil.parseIdFromUri(req);
+        userId = (Integer) req.getSession(false).getAttribute("userId");
+    }
 
     @Override
     public void process() throws ServletException, IOException {
+        logger.info("start returning book {} by user {}", bookId, userId);
+
+        User user = new User();
+        user.setId(userId);
 
+        Book book = new Book();
+        book.setId(bookId);
+
+        try {
+            service.returnBook(user, book);
+            resp.sendRedirect(Uri.MY_OPERATIONS.toAbsolutePath(req.getContextPath()));
+        } catch (Exception e) {
+            logger.error("error taking a book {} to reading room by user {}. Exception: {}", bookId, userId, e);
+            //TODO add a proper exception handling in case a book was returned concurrently (DB exception)
+            resp.sendRedirect(Uri.MY_OPERATIONS.toAbsolutePath(req.getContextPath()));
+        }
     }
 }
Index: src/main/java/com/company/web/FrontControllerServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/web/FrontControllerServlet.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/web/FrontControllerServlet.java	(date 1675098514454)
@@ -42,7 +42,11 @@
             Map.entry(new Endpoint(Uri.SUBSCRIBE, HttpMethod.GET), ShowSubscribeCommand::new),
             Map.entry(new Endpoint(Uri.SUBSCRIBE, HttpMethod.POST), SubmitSubscribeCommand::new),
             Map.entry(new Endpoint(Uri.APPROVE, HttpMethod.GET), ApproveOrderCommand::new),
-            Map.entry(new Endpoint(Uri.OPERATION, HttpMethod.GET), ShowOperationsCommand::new)
+            Map.entry(new Endpoint(Uri.OPERATIONS, HttpMethod.GET), ShowOperationsCommand::new),
+            Map.entry(new Endpoint(Uri.MY_OPERATIONS, HttpMethod.GET), ShowMyOperationsCommand::new),
+            Map.entry(new Endpoint(Uri.RETURN_BOOK, HttpMethod.GET), ReturnBookCommand::new),
+            Map.entry(new Endpoint(Uri.CANCEL_ORDER, HttpMethod.GET), ReturnBookCommand::new),
+            Map.entry(new Endpoint(Uri.UNSUBSCRIBE, HttpMethod.GET), ReturnBookCommand::new)
     );
 
     @Override
Index: src/main/java/com/company/web/View.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/web/View.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/web/View.java	(date 1675096266952)
@@ -10,7 +10,8 @@
     PROFILE("/WEB-INF/jsp/profile.jsp"),
     CATALOGUE("/WEB-INF/jsp/catalogue.jsp"),
     SUBSCRIBE("/WEB-INF/jsp/subscribe.jsp"),
-    OPERATIONS("/WEB-INF/jsp/operations.jsp");
+    OPERATIONS("/WEB-INF/jsp/operations.jsp"),
+    MY_OPERATIONS("/WEB-INF/jsp/myOperations.jsp");
 
     private final String path;
 
Index: src/main/java/com/company/util/selection/SelectionOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/util/selection/SelectionOptions.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/util/selection/SelectionOptions.java	(date 1675108672230)
@@ -4,6 +4,10 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.sql.PreparedStatement;
+import java.util.Collections;
+import java.util.Map;
+
 public class SelectionOptions {
     private static final Logger logger = LoggerFactory.getLogger(SelectionOptions.class);
     private Order order;
@@ -15,7 +19,7 @@
     }
 
     public String applyToQuery(String query) {
-        logger.info("start applying filter to sql query '{}'", query);
+        logger.info("start applying selection options to sql query '{}'", query);
         if (filter != null) {
             query = filter.applyToQuery(query);
         }
@@ -25,7 +29,7 @@
         if(paging!=null) {
             query = paging.applyToQuery(query);
         }
-        logger.info("finished applying filter, the result is '{}'", query);
+        logger.info("finished applying selection options, the result is '{}'", query);
         return query;
     }
 
@@ -33,11 +37,23 @@
         return paging;
     }
 
+    public Map<Filter.FilterColumn, String> getFilterColumnValues() {
+        return filter != null ? filter.getColumnValueMap() : Collections.emptyMap();
+    }
 
     public Filter getFilter() {
         return filter;
     }
 
+    @Override
+    public String toString() {
+        return "SelectionOptions{" +
+                "order=" + order +
+                ", paging=" + paging +
+                ", filter=" + filter +
+                '}';
+    }
+
     public static Builder build() {
         return new SelectionOptions().new Builder();
     }
Index: src/main/java/com/company/util/selection/Filter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/util/selection/Filter.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/util/selection/Filter.java	(date 1675108478623)
@@ -1,58 +1,82 @@
 package com.company.util.selection;
 
-import com.company.util.ValidationUtil;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.StringTokenizer;
 
 public class Filter {
-    private final String column;
-    private final Integer value;
+    private final Map<FilterColumn, String> columnValueMap = new HashMap<>();
 
     public Filter(String queryString) {
-        this.column = extractTargetColumnName(queryString);
-        this.value = Integer.valueOf(extractColumnValue(queryString));
+        init(queryString);
     }
 
     public static boolean isPresent(String queryString) {
-        return queryString != null && queryString.contains("filterBy")
-                && ValidationUtil.isNonNullInteger(extractColumnValue(queryString));
+        return queryString != null && queryString.contains("filterBy");
     }
 
     public String applyToQuery(String query) {
-        String str = String.format("WHERE %s = %d", column, value);
-        int insertionIndex;
-        if ((insertionIndex = query.indexOf("GROUP BY")) != -1) {
-            return String.format("%s%s %s", query.substring(0, insertionIndex), str, query.substring(insertionIndex));
+        for (Map.Entry<FilterColumn, String> entry : columnValueMap.entrySet()) {
+            String operator = query.contains("WHERE") ? "AND" : "WHERE";
+            query = String.format("%s %s %s = ?", query, operator, entry.getKey().columnName);
         }
-        return String.format("%s %s", query, str);
+        return query;
     }
 
-    public Integer getValue() {
-        return value;
-    }
+    private void init(String string) {
+        StringTokenizer tokenizer = new StringTokenizer(string, "&");
+
+        while (tokenizer.hasMoreTokens()) {
+            String token = tokenizer.nextToken();
+
+            FilterColumn column = FilterColumn.toFilterColumn(extractColumnName(token));
+            if (column == null) continue;
+
+            int startIndex = token.indexOf("=");
+            if (startIndex == -1) continue;
+
+            String value = token.substring(startIndex + 1);
+            if ("".equals(value.trim())) continue;
 
-    private static String extractTargetColumnName(String string) {
-        int startIndex = string.indexOf("filterBy");
-        string = string.substring(startIndex);
-        int endIndex = string.indexOf("=");
-        return string.substring(startIndex, endIndex);
+            columnValueMap.put(column, value);
+        }
     }
 
-    private static String extractColumnValue(String string) {
-        string = string.substring(string.indexOf("filterBy"));
-        int startIndex = string.indexOf("=");
-        int endIndex;
-        if (string.contains("&")) {
-            endIndex = string.indexOf("&");
-        } else {
-            endIndex = string.length();
-        }
-        return string.substring(startIndex, endIndex);
+    private static String extractColumnName(String string) {
+        int startIndex = "filterBy".length();
+        return string.substring(startIndex, string.indexOf("="));
     }
 
     @Override
     public String toString() {
         return "Filter{" +
-                "column='" + column + '\'' +
-                ", value=" + value +
+                "columnValueMap=" + columnValueMap +
                 '}';
     }
+
+    public Map<FilterColumn, String> getColumnValueMap() {
+        return columnValueMap;
+    }
+
+    public enum FilterColumn {
+        NAME("books.name"), AUTHOR("books.author");
+        private final String columnName;
+
+        FilterColumn(String columnName) {
+            this.columnName = columnName;
+        }
+
+        private static FilterColumn toFilterColumn(String columnName) {
+            return Arrays.stream(values())
+                    .filter(column -> columnName.equalsIgnoreCase(column.name()))
+                    .findFirst()
+                    .orElse(null);
+
+        }
+
+        public String getColumnName() {
+            return columnName;
+        }
+    }
 }
Index: src/main/java/com/company/web/command/operation/ShowMyOperationsCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/web/command/operation/ShowMyOperationsCommand.java	(date 1675097750110)
+++ src/main/java/com/company/web/command/operation/ShowMyOperationsCommand.java	(date 1675097750110)
@@ -0,0 +1,33 @@
+package com.company.web.command.operation;
+
+import com.company.service.OperationService;
+import com.company.util.WebUtil;
+import com.company.web.View;
+import com.company.web.command.AbstractCommand;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+public class ShowMyOperationsCommand extends AbstractCommand {
+    public static final Logger logger = LoggerFactory.getLogger(ShowMyOperationsCommand.class);
+    private static final OperationService service = new OperationService();
+    private Integer userId;
+
+    @Override
+    public void init(HttpServletRequest req, HttpServletResponse res) {
+        super.init(req, res);
+        userId = (Integer) req.getSession(false).getAttribute("userId");
+    }
+
+    @Override
+    public void process() throws ServletException, IOException {
+        logger.info("start getting all personal orders for user {}", userId);
+
+        req.setAttribute("operations", service.getAllByUser(userId));
+        WebUtil.forward(req, resp, View.MY_OPERATIONS);
+    }
+}
Index: src/main/java/com/company/web/command/operation/ApproveOrderCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/web/command/operation/ApproveOrderCommand.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/web/command/operation/ApproveOrderCommand.java	(date 1675097192585)
@@ -3,7 +3,6 @@
 import com.company.model.Book;
 import com.company.model.User;
 import com.company.service.OperationService;
-import com.company.util.WebUtil;
 import com.company.web.Uri;
 import com.company.web.command.AbstractCommand;
 import org.slf4j.Logger;
@@ -38,6 +37,6 @@
         book.setId(bookId);
 
         service.approveOrder(user, book);
-        resp.sendRedirect(Uri.OPERATION.toAbsolutePath(req.getContextPath()));
+        resp.sendRedirect(Uri.OPERATIONS.toAbsolutePath(req.getContextPath()));
     }
 }
Index: src/main/webapp/WEB-INF/jsp/myOperations.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/WEB-INF/jsp/myOperations.jsp	(date 1675098640214)
+++ src/main/webapp/WEB-INF/jsp/myOperations.jsp	(date 1675098640214)
@@ -0,0 +1,95 @@
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
+<%@ taglib prefix="fn" uri="http://company.com/functions" %>
+<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
+
+<html>
+<jsp:include page="fragments/headTag.jsp"/>
+<body>
+<jsp:include page="fragments/bodyHeader.jsp"/>
+
+<div class="container mt-3 ml-3">
+    <p class="h3 mb-4 text-center"><fmt:message key="myoperations" bundle="${lang}"/></p>
+    <c:choose>
+        <c:when test="${not empty errorCode}">
+            <div class="alert alert-warning" role="alert">
+                <fmt:message key="${errorCode}" bundle="${lang}"/>
+            </div>
+        </c:when>
+    </c:choose>
+
+    <c:choose>
+        <c:when test="${not empty operations}">
+            <table class="table" aria-describedby="activities-table">
+                <thead class="thead-light">
+                <tr>
+                    <th scope="col"><fmt:message key="book.title" bundle="${lang}"/></th>
+                    <th scope="col"><fmt:message key="book.author" bundle="${lang}"/></th>
+                    <th scope="col"><fmt:message key="operation.status" bundle="${lang}"/></th>
+                    <th scope="col"><fmt:message key="operation.startDate" bundle="${lang}"/></th>
+                    <th scope="col"><fmt:message key="operation.endDate" bundle="${lang}"/></th>
+                    <th scope="col"><fmt:message key="operation.debt" bundle="${lang}"/></th>
+                    <th scope="col"><fmt:message key="app.actions" bundle="${lang}"/></th>
+                </tr>
+                </thead>
+                <c:forEach items="${operations}" var="operation">
+                    <jsp:useBean id="operation" type="com.company.model.Operation"/>
+                    <tr>
+                        <td><c:out value="${operation.book.name}"/></td>
+                        <td><c:out value="${operation.book.author}"/></td>
+                        <td><c:out value="${operation.status}"/></td>
+                        <td>${fn:formatDateTime(operation.startDate)}</td>
+                        <td>
+                            <c:choose>
+                                <c:when test="${operation.status.name() == SUBSCRIPTION}">
+                                    ${fn:appendDays(operation.startDate, operation.duration)}
+                                </c:when>
+                            </c:choose>
+                        </td>
+                        <td>
+                                <c:choose>
+                                    <c:when test="${operation.status.name() == SUBSCRIPTION}">
+                                        ${fn:calculateDebt(operation.startDate, operation.duration)}
+                                    </c:when>
+                                    <c:otherwise>
+                                        0
+                                    </c:otherwise>
+                                </c:choose>
+                        </td>
+                        <td>
+                            <c:choose>
+                                <c:when test="${operation.status.name() == ORDER}">
+                                    <a class="btn btn-danger btn-sm"
+                                       href="operation/cancel/${operation.book.id}">
+                                        <fmt:message key="app.button.cancel" bundle="${lang}"/>
+                                    </a>
+                                </c:when>
+                                <c:when test="${READER == SESSION_ROLE && operation.status.name() == SUBSCRIPTION}">
+                                    <a class="btn btn-success btn-sm"
+                                       href="operation/unsub/${operation.book.id}">
+                                        <fmt:message key="app.button.payAndUnsubscribe" bundle="${lang}"/>
+                                    </a>
+                                </c:when>
+                                <c:when test="${READER == SESSION_ROLE && operation.status.name() == READING_ROOM}">
+                                    <a class="btn btn-info btn-sm"
+                                       href="operation/return/${operation.book.id}">
+                                        <fmt:message key="app.button.return" bundle="${lang}"/>
+                                    </a>
+                                </c:when>
+                            </c:choose>
+                        </td>
+                    </tr>
+                </c:forEach>
+
+            </table>
+        </c:when>
+
+        <c:otherwise>
+            <fmt:message key="app.noRecords" bundle="${lang}"/>
+        </c:otherwise>
+    </c:choose>
+
+</div>
+<jsp:include page="fragments/footer.jsp"/>
+</body>
+</html>
Index: src/main/java/com/company/web/command/user/SubmitLoginCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/web/command/user/SubmitLoginCommand.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/web/command/user/SubmitLoginCommand.java	(date 1675095722785)
@@ -4,6 +4,7 @@
 import com.company.service.UserService;
 import com.company.util.UserUtil;
 import com.company.util.WebUtil;
+import com.company.web.Uri;
 import com.company.web.View;
 import com.company.web.command.AbstractCommand;
 import com.company.web.FrontControllerServlet;
@@ -27,7 +28,7 @@
         if (UserUtil.checkPasswordsEquals(password, user.getPassword())) {
                 renewUserSession(req, user);
             //   resp.sendRedirect(Uri.HOME.getPath());
-            WebUtil.forward(req, resp, View.HOME);
+            resp.sendRedirect(Uri.HOME.toAbsolutePath(req.getContextPath()));
         } else {
             logger.info("wrong passwords: user password is " + user.getPassword() + " and provided " + password);
             //throw new NotFoundException();
Index: sql/db-create.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sql/db-create.sql	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ sql/db-create.sql	(date 1675108393089)
@@ -86,7 +86,7 @@
 
 
 SELECT * FROM users;
-SELECT * FROM books;
-SELECT * FROM book_operations;
+SELECT * FROM books WHERE books.count > 0 AND books.name = 'Vocabulary32';
+SELECT * FROM book_operations
 
 
Index: src/main/resources/messages/resources_en.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/messages/resources_en.properties	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/resources/messages/resources_en.properties	(date 1675097264397)
@@ -8,6 +8,7 @@
 app.registered=You are registered. Please Sign in.
 app.home=Home Page
 app.noRecords=No records found
+app.button.cancel=cancel
 app.button.delete=delete
 app.button.update=update
 app.button.create=create
Index: src/main/java/com/company/service/OperationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/service/OperationService.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/service/OperationService.java	(date 1675097553257)
@@ -66,8 +66,8 @@
         dao.insertOperation(operation);
     }
 
-    public void finish(User user, Book book) {
-        logger.info("finishing operation on book {} for user {}", book.getId(), user.getId());
+    public void returnBook(User user, Book book) {
+        logger.info("returning book {} for user {}", book.getId(), user.getId());
 
         Operation operation = new Operation();
 
@@ -83,4 +83,10 @@
         return dao.findAll();
     }
 
+    public List<Operation> getAllByUser(Integer userId) {
+        logger.info("looking for all operations");
+
+        return dao.findByUserId(userId);
+    }
+
 }
Index: src/main/java/com/company/service/BookService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/company/service/BookService.java	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/java/com/company/service/BookService.java	(date 1675108672223)
@@ -46,9 +46,9 @@
         dao.update(book);
     }
 
-    public int getCount(Filter filtering) {
-        return filtering != null
-                ? dao.findCount(filtering)
+    public int getCount(Filter filter) {
+        return filter != null
+                ? dao.findCount(filter)
                 : dao.findCount();
     }
 }
Index: src/main/resources/messages/resources_ua.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/messages/resources_ua.properties	(revision 5488de69463e4236a50341e45403942551c2500e)
+++ src/main/resources/messages/resources_ua.properties	(date 1675097279738)
@@ -7,6 +7,7 @@
 app.register=\u0420\u0435\u0454\u0441\u0442\u0440\u0430\u0446\u0456\u044f
 app.registered=\u0412\u0438 \u0443\u0441\u043f\u0456\u0448\u043d\u043e \u0437\u0430\u0440\u0435\u0454\u0441\u0442\u0440\u043e\u0432\u0430\u043d\u0456. \u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u0443\u0432\u0456\u0439\u0434\u0456\u0442\u044c
 app.home=\u0414\u043e\u043c\u0430\u0448\u043d\u044f \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0430
+app.button.cancel=\u0412\u0456\u0434\u043c\u0456\u043d\u0438\u0442\u0438
 app.button.delete=\u0432\u0438\u0434\u0430\u043b\u0438\u0442\u0438
 app.button.update=\u0437\u043c\u0456\u043d\u0438\u0442\u0438
 app.button.create=\u0441\u0442\u0432\u043e\u0440\u0438\u0442\u0438
